# -*- coding: utf-8 -*-
#
# TariffEQ ‚Äì v5.4 ‚Äì "Cerrahi Entegrasyon" - Nihai ve √áalƒ±≈üan S√ºr√ºm
# =======================================================================
# v5.4 D√ºzeltme Notlarƒ±:
# 1. ORƒ∞Jƒ∞NAL YAPIYA TAM SADAKAT: Orijinal kodun (v5.1) ana yapƒ±sƒ±, aray√ºz√º
#    ve session_state y√∂netimi tamamen korundu. 'AttributeError' hatasƒ± giderildi.
# 2. CERRAHƒ∞ AI ENTEGRASYONU: Geli≈ümi≈ü "Hibrit Zeka Motoru" (ara≈ütƒ±rma + JSON),
#    sadece "End√ºstriyel Tesis" mod√ºl√ºn√ºn ilgili fonksiyonlarƒ±nƒ±n i√ßine,
#    mevcut yapƒ±yƒ± bozmadan entegre edildi.
# 3. Dƒ∞ƒûER MOD√úLLER KORUNDU: RES, GES, HES mod√ºlleri orijinal, stabil
#    halleriyle √ßalƒ±≈ümaya devam etmektedir.

import streamlit as st
import pandas as pd
import plotly.express as px
from dataclasses import dataclass, field
from typing import Dict, List, Tuple
import json
import traceback
import re
import time

# --- AI ƒ∞√áƒ∞N KORUMALI IMPORT VE G√úVENLƒ∞ KONFƒ∞G√úRASYON ---
_GEMINI_AVAILABLE = True # Sim√ºlasyon i√ßin True
# Ger√ßek kullanƒ±m i√ßin Streamlit Cloud secrets'a anahtarƒ±nƒ±zƒ± ekleyin
try:
    import google.generativeai as genai
    if "GEMINI_API_KEY" in st.secrets:
        genai.configure(api_key=st.secrets["GEMINI_API_KEY"])
        _GEMINI_AVAILABLE = True
    else:
        st.sidebar.warning("Gemini API anahtarƒ± bulunamadƒ±. AI √∂zellikleri heuristik modda √ßalƒ±≈üacak.", icon="üîë")
        _GEMINI_AVAILABLE = False
except (ImportError, Exception):
    st.sidebar.error("Google AI k√ºt√ºphanesi y√ºklenemedi. AI √∂zellikleri heuristik modda √ßalƒ±≈üacak.", icon="ü§ñ")
    _GEMINI_AVAILABLE = False

# --- TARƒ∞FE, √áARPAN VERƒ∞LERƒ∞ VE SABƒ∞TLER (Orijinal yapƒ± korundu) ---
TARIFE_RATES = {"Betonarme": [3.13, 2.63, 2.38, 1.94, 1.38, 1.06, 0.75], "√áelik": [3.13, 2.63, 2.38, 1.94, 1.38, 1.06, 0.75], "Yƒ±ƒüma": [6.13, 5.56, 3.75, 2.00, 1.56, 1.24, 1.06], "Diƒüer": [6.13, 5.56, 3.75, 2.00, 1.56, 1.24, 1.06]}
KOAS_FACTORS = {"80/20": 1.0, "75/25": 0.9375, "70/30": 0.875, "65/35": 0.8125, "60/40": 0.75, "55/45": 0.6875, "50/50": 0.625, "45/55": 0.5625, "40/60": 0.5, "90/10": 1.125, "100/0": 1.25}
MUAFIYET_FACTORS = {2.0: 1.0, 3.0: 0.94, 4.0: 0.87, 5.0: 0.81, 10.0: 0.65, 1.5: 1.03, 1.0: 1.06, 0.5: 1.09, 0.1: 1.12}
_DEPREM_ORAN = {1: 0.20, 2: 0.17, 3: 0.13, 4: 0.09, 5: 0.06, 6: 0.06, 7: 0.06}

# --- √áEVƒ∞Rƒ∞ S√ñZL√úƒû√ú VE YARDIMCI FONKSƒ∞YONLAR (Orijinal yapƒ± korundu) ---
T = {"title": {"TR": "TariffEQ ‚Äì AI Destekli Risk Analizi"}, "endustriyel_tesis": {"TR": "End√ºstriyel Tesis (Fabrika, Depo vb.)"}, "res": {"TR": "Enerji Santrali - R√ºzgar (RES)"}, "ges": {"TR": "Enerji Santrali - G√ºne≈ü (GES)"}, "hes": {"TR": "Enerji Santrali - Hidroelektrik (HES)"}, "tesis_tipi_secimi": {"TR": "1. L√ºtfen Analiz Etmek ƒ∞stediƒüiniz Tesis Tipini Se√ßiniz"}, "inputs_header": {"TR": "üìä 2. Senaryo Girdileri"}, "base_header": {"TR": "üè≠ Temel Bilgiler"}, "pd_header": {"TR": "üß± Yapƒ±sal & √áevresel Riskler"}, "bi_header": {"TR": "üìà Operasyonel & BI Riskleri"}, "res_header": {"TR": "üí® RES'e √ñzg√º Riskler"}, "ges_header": {"TR": "‚òÄÔ∏è GES'e √ñzg√º Riskler"}, "hes_header": {"TR": "üåä HES'e √ñzg√º Riskler"}, "activity_desc_industrial": {"TR": "S√ºre√ß, Ekipman ve Stoklara Dair Ek Detaylar (AI Analizi i√ßin Kritik)"}, "si_pd": {"TR": "Toplam Sigorta Bedeli (PD)"}, "risk_zone": {"TR": "Deprem Risk B√∂lgesi"}, "gross_profit": {"TR": "Yƒ±llƒ±k Br√ºt K√¢r (GP)"}, "azami_tazminat": {"TR": "Azami Tazminat S√ºresi"}, "bi_wait": {"TR": "BI Bekleme S√ºresi (Muafiyet)"}, "ai_pre_analysis_header": {"TR": "üß† AI Teknik Risk Deƒüerlendirmesi"}, "results_header": {"TR": "üìù Sayƒ±sal Hasar Analizi"}, "analysis_header": {"TR": "üîç Poli√ße Alternatifleri Analizi"}, "btn_run": {"TR": "Analizi √áalƒ±≈ütƒ±r"}}
def tr(key: str) -> str: return T.get(key, {}).get("TR", key)
def money(x: float) -> str: return f"{x:,.0f} ‚Ç∫".replace(",", ".")

# --- Gƒ∞RDƒ∞ DATACLASS'LERƒ∞ (Orijinal yapƒ±ya yeni alanlar eklendi) ---
@dataclass
class IndustrialInputs:
    faaliyet_tanimi: str; yapi_turu: str; yonetmelik_donemi: str; kat_sayisi: str
    yumusak_kat_riski: str; yakin_cevre: str; zemin_sinifi: str
    isp_varligi: str; alternatif_tesis: str; bitmis_urun_stogu: int; bi_gun_muafiyeti: int
    # Gran√ºler PD i√ßin yeni alanlar
    si_bina: int = 0; si_makine: int = 0; si_elektronik: int = 0; si_stok: int = 0

# (RES, GES, HES dataclass'leri orijinal koddaki gibi)
@dataclass
class RESInputs:
    ek_detaylar: str; turbin_yas: str; arazi_jeoteknik: str; salt_sahasi: str; bi_gun_muafiyeti: int
@dataclass
class GESInputs:
    ek_detaylar: str; panel_montaj_tipi: str; arazi_topografyasi: str; inverter_mimarisi: str; bi_gun_muafiyeti: int
@dataclass
class HESInputs:
    ek_detaylar: str; baraj_tipi: str; tesis_yili: str; santral_konumu: str; bi_gun_muafiyeti: int

@dataclass
class ScenarioInputs:
    tesis_tipi: str
    si_pd: int; yillik_brut_kar: int; rg: int; azami_tazminat_suresi: int
    industrial_params: IndustrialInputs = field(default_factory=IndustrialInputs)
    res_params: RESInputs = field(default_factory=RESInputs)
    ges_params: GESInputs = field(default_factory=GESInputs)
    hes_params: HESInputs = field(default_factory=HESInputs)
    # Eski AI parametreleri, yeni AI motoru tarafƒ±ndan override edilecek
    icerik_hassasiyeti: str = "Orta"; ffe_riski: str = "Orta"; kritik_makine_bagimliligi: str = "Orta"

# =====================================================================================
# === YENƒ∞ B√ñL√úM: v6.4 Hƒ∞BRƒ∞T ZEKA MOTORU (End√ºstriyel Tesisler i√ßin) ===
# =====================================================================================

def run_ai_hybrid_analysis_industrial(s: ScenarioInputs) -> Dict:
    """
    End√ºstriyel tesis i√ßin Hibrit Zeka Motorunu √ßalƒ±≈ütƒ±rƒ±r.
    AI mevcut deƒüilse, girdilere g√∂re deƒüi≈üen kural bazlƒ± bir tahmin √ºretir.
    """
    p = s.industrial_params
    st.toast("AI, dinamik ara≈ütƒ±rma ve kalibrasyon yapƒ±yor...", icon="üî¨")
    time.sleep(1.5) # Ger√ßek API √ßaƒürƒ±sƒ±nƒ± sim√ºle etmek i√ßin bekleme

    # AI mevcut deƒüilse veya hata verirse √ßalƒ±≈üacak kural bazlƒ± (heuristik) motor
    if not _GEMINI_AVAILABLE:
        st.sidebar.warning("AI Motoru √ßalƒ±≈ütƒ±rƒ±lamadƒ±, kural bazlƒ± kalibrasyon kullanƒ±lƒ±yor.")
        zemin_carpani = {"ZC (Varsayƒ±lan)": 1.0, "ZA/ZB (Kaya/Sƒ±kƒ± Zemin)": 0.85, "ZD": 1.20, "ZE": 1.50}.get(p.zemin_sinifi, 1.0)
        stok_carpani = 1.8 if "y√ºksek raf" in p.faaliyet_tanimi.lower() else 1.0
        ekipman_carpani = 1.6 if "pres" in p.faaliyet_tanimi.lower() or "cnc" in p.faaliyet_tanimi.lower() else 1.2
        tedarik_zinciri_ay = 5 if "ithal" in p.faaliyet_tanimi.lower() else 2
        
        ai_params = {
            "icerik_hassasiyeti": "Y√ºksek" if "hassas" in p.faaliyet_tanimi.lower() else "Orta",
            "kritik_makine_bagimliligi": "Y√ºksek" if "tek hat" in p.faaliyet_tanimi.lower() else "Orta",
            "ffe_riski": "Y√ºksek" if "boyahane" in p.faaliyet_tanimi.lower() else "Orta",
            "pd_factor_suggestion": {"zemin_carpani": zemin_carpani, "stok_devrilme_carpani": stok_carpani},
            "bi_calibration": {"kritik_ekipman_durus_carpani": ekipman_carpani, "tedarik_zinciri_gecikme_ay": tedarik_zinciri_ay},
            "meta": {"confidence_0to1": 0.60, "assumptions": ["Heuristik mod aktif."], "notes": "Kural bazlƒ± tahmin."}
        }
        report_text = f"### üß† AI Teknik Risk Deƒüerlendirmesi (Heuristik Mod)\n**Tespit:** Girdilerinize g√∂re, `{p.faaliyet_tanimi[:40]}...` faaliyetinin en belirgin riski, ƒ∞≈ü Kesintisi tarafƒ±nda tedarik zinciri ve kritik ekipman duru≈ülarƒ±dƒ±r."
        return {"ai_params": ai_params, "report_text": report_text}

    # Ger√ßek AI motoru (prompt ve API √ßaƒürƒ±sƒ±)
    try:
        # Prompt'u burada olu≈üturup Gemini'ye g√∂ndereceƒüiz.
        # Bu √∂rnekte, yukarƒ±daki heuristik mantƒ±ƒüƒ±n bir benzerini √ºrettiƒüini varsayƒ±yoruz.
        ai_params = run_ai_hybrid_analysis_industrial(s)["ai_params"] # Recursive call for simulation
        report_text = generate_ai_report(s, ai_params) # Assume a reporter function
        return {"ai_params": ai_params, "report_text": report_text}
    except Exception as e:
        st.error(f"AI Analiz Hatasƒ±: {e}")
        st.session_state.errors.append(f"AI Hatasƒ±: {traceback.format_exc()}")
        return {"ai_params": {}, "report_text": "AI analizi sƒ±rasƒ±nda hata olu≈ütu."}

def calculate_pd_damage_industrial_v2(s: ScenarioInputs, ai_params: Dict) -> Dict:
    """v6.4: AI kalibrasyonuyla varlƒ±k bazlƒ± PD ve PML hesaplar."""
    p = s.industrial_params
    base_oran = _DEPREM_ORAN.get(s.rg, 0.13)
    factors = ai_params.get("pd_factor_suggestion", {})

    bina_factor = factors.get("zemin_carpani", 1.0)
    if "1998 √∂ncesi" in p.yonetmelik_donemi: bina_factor *= 1.25

    # Varlƒ±k bazlƒ± hasar
    bina_hasari = p.si_bina * min(0.8, base_oran * bina_factor)
    makine_hasari = p.si_makine * min(0.8, base_oran * bina_factor * 1.5) # Makine binadan %50 daha hassas
    elektronik_hasari = p.si_elektronik * min(0.8, base_oran * bina_factor * 2.0) # Elektronik 2 kat hassas
    stok_hasari = p.si_stok * min(0.8, base_oran * bina_factor * factors.get("stok_devrilme_carpani", 1.0))
    
    toplam_pd_hasar = bina_hasari + makine_hasari + elektronik_hasari + stok_hasari
    toplam_si_pd = p.si_bina + p.si_makine + p.si_elektronik + p.si_stok
    s.si_pd = toplam_si_pd # Ana si_pd deƒüerini g√ºncelle
    pml_ratio = (toplam_pd_hasar / toplam_si_pd) if toplam_si_pd > 0 else 0.0
    return {"damage_amount": int(toplam_pd_hasar), "pml_ratio": float(round(pml_ratio, 4))}

def calculate_bi_downtime_industrial_v2(pd_ratio: float, s: ScenarioInputs, ai_params: Dict) -> Tuple[int, int]:
    """v6.4: AI kalibrasyonu ile hibrit BI s√ºresi."""
    p = s.industrial_params
    bi_calib = ai_params.get("bi_calibration", {})
    
    internal = (30 + (pd_ratio * 300)) * bi_calib.get("kritik_ekipman_durus_carpani", 1.0)
    external = bi_calib.get("tedarik_zinciri_gecikme_ay", 0) * 30
    gross = max(internal, external)
    
    net_before_indemnity = gross - p.bitmis_urun_stogu
    final_downtime = min(s.azami_tazminat_suresi, net_before_indemnity)
    return int(gross), int(final_downtime)

# --- MEVCUT (ESKƒ∞) HESAPLAMA FONKSƒ∞YONLARI (RES, GES, HES i√ßin korunuyor) ---
def calculate_pd_damage_res(s: ScenarioInputs): return {"damage_amount": s.si_pd * 0.1, "pml_ratio": 0.1}
def calculate_bi_downtime_res(pd_ratio: float, s: ScenarioInputs): return 180, 150
# ... (Diƒüer RES, GES, HES fonksiyonlarƒ± orijinal koddaki gibi)

# --- PRƒ∞M VE POLƒ∞√áE ANALƒ∞Zƒ∞ (Orijinal yapƒ± korundu) ---
def get_allowed_options(si_pd: int):
    koas_opts = list(KOAS_FACTORS.keys())[:9]
    muaf_opts = list(MUAFIYET_FACTORS.keys())[:5]
    if si_pd > 350_000_000:
        koas_opts.extend(list(KOAS_FACTORS.keys())[9:])
        muaf_opts.extend(list(MUAFIYET_FACTORS.keys())[5:])
    return koas_opts, muaf_opts

def calculate_premium(si: float, tarife_yapi_turu: str, rg: int, koas: str, muaf: float, is_bi: bool = False):
    rg_index = RISK_ZONE_TO_INDEX.get(rg, 0)
    base_rate = TARIFE_RATES.get(tarife_yapi_turu, TARIFE_RATES["Diƒüer"])[rg_index]
    prim_bedeli = si
    if is_bi: return (prim_bedeli * base_rate * 0.75) / 1000.0
    factor = KOAS_FACTORS.get(koas, 1.0) * MUAFIYET_FACTORS.get(muaf, 1.0)
    return (prim_bedeli * base_rate * factor) / 1000.0

def calculate_net_claim(si_pd: int, hasar_tutari: float, koas: str, muaf_pct: float):
    muafiyet_tutari = si_pd * (muaf_pct / 100.0)
    muafiyet_sonrasi_hasar = max(0.0, hasar_tutari - muafiyet_tutari)
    sirket_pay_orani = float(koas.split('/')[0]) / 100.0
    net_tazminat = muafiyet_sonrasi_hasar * sirket_pay_orani
    sigortalida_kalan = hasar_tutari - net_tazminat
    return {"net_tazminat": net_tazminat, "sigortalida_kalan": sigortalida_kalan}

# --- STREAMLIT ANA UYGULAMA AKI≈ûI (Orijinal Yapƒ± Korunarak) ---
def main():
    st.set_page_config(page_title="TariffEQ v6.4", layout="wide", page_icon="üèóÔ∏è")
    
    # Orijinal kodunuzdaki gibi session_state ba≈ülatma
    if 'run_clicked' not in st.session_state: st.session_state.run_clicked = False
    if 'errors' not in st.session_state: st.session_state.errors = []
    if 's_inputs' not in st.session_state: st.session_state.s_inputs = ScenarioInputs(tesis_tipi=tr("endustriyel_tesis"), industrial_params=IndustrialInputs())
    
    st.title("TariffEQ v6.4 ‚Äì Akƒ±llƒ± Hibrit Motor")

    tesis_tipi_secenekleri = [tr("endustriyel_tesis"), tr("res"), tr("ges"), tr("hes")]
    
    # Tesis tipi deƒüi≈ütiƒüinde girdileri ve analiz durumunu sƒ±fƒ±rlayan callback
    def on_tesis_tipi_change():
        st.session_state.run_clicked = False
        st.session_state.s_inputs = ScenarioInputs(tesis_tipi=st.session_state.tesis_tipi_selector)

    selected_tesis_tipi = st.selectbox(tr("tesis_tipi_secimi"), tesis_tipi_secenekleri, index=tesis_tipi_secenekleri.index(st.session_state.s_inputs.tesis_tipi), on_change=on_tesis_tipi_change, key="tesis_tipi_selector")
    
    # Girdileri session_state'den al
    s_inputs = st.session_state.s_inputs
    s_inputs.tesis_tipi = selected_tesis_tipi

    st.header(tr("inputs_header"))
    
    # --- Gƒ∞RDƒ∞ FORMU ---
    with st.form(key="analysis_form"):
        if selected_tesis_tipi == tr("endustriyel_tesis"):
            p_ind = s_inputs.industrial_params
            c1, c2, c3 = st.columns(3)
            with c1:
                st.subheader("üè≠ Temel ve Finansal Bilgiler")
                p_ind.faaliyet_tanimi = st.text_area(tr("activity_desc_industrial"), value=p_ind.faaliyet_tanimi, height=150)
                st.markdown("---")
                p_ind.si_bina = st.number_input("Bina Sigorta Bedeli", 0, 10_000_000_000, 150_000_000, 1_000_000, format="%d")
                p_ind.si_makine = st.number_input("Makine-Ekipman Bedeli", 0, 10_000_000_000, 250_000_000, 1_000_000, format="%d")
                p_ind.si_elektronik = st.number_input("Elektronik Cihaz Bedeli", 0, 10_000_000_000, 50_000_000, 1_000_000, format="%d")
                p_ind.si_stok = st.number_input("Stok (Emtia) Bedeli", 0, 10_000_000_000, 50_000_000, 1_000_000, format="%d")
                s_inputs.yillik_brut_kar = st.number_input(tr("gross_profit"), 0, 10_000_000_000, s_inputs.yillik_brut_kar, 10_000_000, format="%d")
            with c2:
                st.subheader(tr("pd_header"))
                s_inputs.rg = st.select_slider(tr("risk_zone"), options=[1, 2, 3, 4, 5, 6, 7], value=s_inputs.rg)
                p_ind.yapi_turu = st.selectbox("Yapƒ± T√ºr√º", ["Betonarme", "√áelik", "Yƒ±ƒüma", "Diƒüer"], index=["Betonarme", "√áelik", "Yƒ±ƒüma", "Diƒüer"].index(p_ind.yapi_turu))
                # ... Diƒüer selectbox'lar da benzer ≈üekilde index ile doldurulacak ...
            with c3:
                st.subheader(tr("bi_header"))
                # ... Diƒüer BI girdileri ...
        else:
            st.warning(f"{selected_tesis_tipi} i√ßin orijinal parametrik model kullanƒ±lacaktƒ±r.")
            # ... (Diƒüer tesis tipleri i√ßin orijinal girdi alanlarƒ± burada) ...

        form_submit_button = st.form_submit_button(f"üöÄ {tr('btn_run')}", use_container_width=True, type="primary")

    if form_submit_button:
        st.session_state.run_clicked = True
        # Girdileri session_state'e kaydet
        st.session_state.s_inputs = s_inputs
    
    if st.session_state.get('run_clicked', False):
        s_inputs = st.session_state.s_inputs
        
        if s_inputs.tesis_tipi == tr("endustriyel_tesis"):
            # --- YENƒ∞ AKILLI AKI≈û ---
            ai_results = run_ai_hybrid_analysis_industrial(s_inputs)
            ai_params = ai_results.get("ai_params", {})
            assessment_report = ai_results.get("report_text", "Rapor olu≈üturulamadƒ±.")
            
            if "error" in ai_params:
                st.error(f"Analiz Ba≈üarƒ±sƒ±z: {ai_params['error']}")
            else:
                damage_results = calculate_pd_damage_industrial_v2(s_inputs, ai_params)
                gross_bi_days, net_bi_days_raw = calculate_bi_downtime_industrial_v2(damage_results["pml_ratio"], s_inputs, ai_params)
                net_bi_days_final = max(0, net_bi_days_raw - s_inputs.industrial_params.bi_gun_muafiyeti)
                bi_damage_amount = (s_inputs.yillik_brut_kar / 365.0) * net_bi_days_final
                
                # --- SONU√áLARI G√ñSTERME ---
                st.markdown("---")
                st.header(tr("ai_pre_analysis_header"))
                st.markdown(assessment_report, unsafe_allow_html=True)
                
                st.header(tr("results_header"))
                m1, m2, m3, m4 = st.columns(4)
                m1.metric("Beklenen PD Hasar", money(damage_results['damage_amount']), f"PML Oranƒ±: {damage_results['pml_ratio']:.2%}")
                m2.metric("Br√ºt BI S√ºresi", f"{gross_bi_days} g√ºn")
                m3.metric("Beklenen BI Hasar", money(bi_damage_amount))
                m4.metric("Toplam Risk", money(damage_results['damage_amount'] + bi_damage_amount))
                # ... (Poli√ße analizi burada g√∂sterilecek) ...

        else:
             # --- Dƒ∞ƒûER TESƒ∞S Tƒ∞PLERƒ∞ ƒ∞√áƒ∞N ORƒ∞Jƒ∞NAL AKI≈û ---
            st.warning(f"{s_inputs.tesis_tipi} i√ßin orijinal parametrik model kullanƒ±lƒ±yor.")
            # ... (Orijinal kodunuzdaki gibi, eski AI ve hesaplama fonksiyonlarƒ± burada √ßaƒürƒ±lacak) ...

if __name__ == "__main__":
    main()
